import speech_recognition as sr
import json
from datetime import datetime
from transformers import pipeline

# Load sarcasm classifier model (you could fine-tune your own later)
sarcasm_detector = pipeline("text-classification", model="mrm8488/t5-base-finetuned-sarcasm-twitter")

# Store sarcastic comments
sarcasm_log = []

def transcribe_audio():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("üéôÔ∏è Listening... Say something sarcastic or not!")
        audio = recognizer.listen(source)
        try:
            text = recognizer.recognize_google(audio)
            print(f"üìù Transcribed: {text}")
            return text
        except sr.UnknownValueError:
            print("üòµ Speech Recognition could not understand audio")
            return None
        except sr.RequestError as e:
            print(f"‚ö†Ô∏è Could not request results; {e}")
            return None

def detect_sarcasm(text):
    result = sarcasm_detector(text)[0]
    label = result['label']
    score = result['score']
    print(f"üé≠ Sarcasm Detected: {label} (Confidence: {score:.2f})")
    return label == "sarcasm", score

def save_comment(text, is_sarcastic, confidence):
    timestamp = datetime.now().isoformat()
    entry = {
        "timestamp": timestamp,
        "comment": text,
        "sarcastic": is_sarcastic,
        "confidence": confidence
    }
    sarcasm_log.append(entry)
    with open("sarcasm_comments.json", "w") as f:
        json.dump(sarcasm_log, f, indent=4)
    print("‚úÖ Comment saved to sarcasm_comments.json")

# Main loop
if __name__ == "__main__":
    while True:
        text = transcribe_audio()
        if text:
            is_sarcastic, confidence = detect_sarcasm(text)
            save_comment(text, is_sarcastic, confidence)
